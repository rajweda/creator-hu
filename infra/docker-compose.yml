version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: creator-hub-db
    environment:
      POSTGRES_DB: creator_hub
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - creator-hub-network

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    container_name: creator-hub-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres123}@postgres:5432/creator_hub
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      UPLOAD_PATH: /app/uploads
    volumes:
      - uploads_data:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - creator-hub-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.frontend
    container_name: creator-hub-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - creator-hub-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: creator-hub-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - creator-hub-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  creator-hub-network:
    driver: bridge